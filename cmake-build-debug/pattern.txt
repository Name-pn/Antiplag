МИНИСТЕРСТВО НАУКИ И ВЫСШЕГО ОБРАЗОВАНИЯ 
РОССИЙСКОЙ ФЕДЕРАЦИИ

ФЕДЕРАЛЬНОЕ ГОСУДАРСТВЕННОЕ БЮДЖЕТНОЕ ОБРАЗОВАТЕЛЬНОЕ УЧРЕЖДЕНИЕ ВЫСШЕГО ОБРАЗОВАНИЯ

«БЕЛГОРОДСКИЙ ГОСУДАРСТВЕННЫЙ 
ТЕХНОЛОГИЧЕСКИЙ УНИВЕРСИТЕТ им. В. Г. ШУХОВА»
(БГТУ им. В.Г. Шухова)

Кафедра программного обеспечения вычислительной техники и автоматизированных систем







Лабораторная работа №4
по дисциплине: Основы программирования
тема: «Обработка одномерных массивов с использованием подпрограмм»











Выполнил: ст. группы ПВ-201
Азаров Александр Вячеславович

Проверил: доцент
Брусенцева Валентина Станиславовна







Белгород 2020 г.
 
Лабораторная работа №4
«Обработка одномерных массивов с использованием подпрограмм»
Цель работы:
Получение навыков работы с массивами и подпрограммами
Задания для подготовки к работе:
	Изучите способы описания и использования массивов, базовые алгоритмы обработки массивов
	Изучите виды и назначения подпрограмм, правила их описания и вызова
	Разбейте задачу соответствующего варианта на подзадачи, таким образом, чтобы решение каждой подзадачи описывалось подпрограммой, а основная программа состояла бы в основном из вызовов подпрограмм
	Опишите блок-схему алгоритма решения задачи в укрепненных блоках. 
	Опишите использованные структуры данных, спецификация содержит: заголовок подпрограммы, назначение, входные и выходные параметры.
	Опишите блок-схему алгоритма решения задачи с использованием блоков “предопределенный процесс”
	Закодируйте алгоритм
	Подберите наборы тестовых данных с обоснованием их выбора
Задания к работе:
	Наберите программу, отладьте ее и протестируйте. 
	Выполните анализ ошибок, выявленных при отладке программы.
 
Выполнение работы:
	Задание варианта № 1:
Дана целочисленная последовательность. Упорядочить по не убыванию часть последовательности, заключенную между первым вхождением максимального значения и последним вхождением минимального. 
	Выделение подзадач:
Выделим следующие подзадачи:
	Ввод последовательности заданной длины в массив.
	Обмен значений двух целочисленных переменных.
	Определение номера первого вхождения максимального элемента последовательности.
	Определение номера последнего вхождения минимального элемента последовательности.
	Упорядочивание по не убыванию элементов массива, расположенных между заданными позициями i1 и i2 ( включительно ).
	Вывод последовательности заданной длины, записанной в массив.
Опишем алгоритм в укрупненных блоках в терминах выделенных подзадач
 
	Блок-схема алгоритма в укрупненных блоках: 
 
Рис. 1 — “Блок – схема алгоритма в укрупненных блоках”
	Описание структур данных:
const SIZE = 100;
type t_arr = array [1..SIZE] of integer; 
	Описание подпрограмм:
Процедура input_array:
	Заголовок procedure input_array (var a: t_arr; const n: integer;).
	Назначение: ввод последовательности длины n 
( n ≤ SIZE ) в массив a.
	Входные параметры: n.
	Выходные параметры: a.
Блок-схема:
 
Рис. 2 — “Блок-схема процедуры ввода последовательности заданной длины в массив”
 
Процедура swap:
	Заголовок: procedure swap ( var a, b: integer ).
	Назначение: обменивает значения переменных a и b.
	Входные параметры: a, b.
	Выходные параметры: a, b.
Блок – схема:
 
Рис. 3 — “Блок – схема процедуры обмена значений переменных”
 
Функция search_first_max:
	Заголовок: function search_first_max ( const a: t_arr; const n : integer; ): integer.
	Назначение: возвращает номер первого вхождения максимального элемента последовательности длиною n ( n ≤ SIZE ) в массив a.
	Входные параметры: a, n.
	Выходные параметры: нет.
Блок-схема: 
 
Рис. 4 — “Блок – схема функции определения номера первого вхождения максимального элемента в массив”
 
Функция search_last_min:
	Заголовок: function search_last_min ( const a: t_arr; const n: integer; ): integer.
	Назначение: возвращает номер последнего вхождения минимального элемента последовательности длиною n ( n ≤ SIZE ) в массив a.
	Входные параметры: a, n.
	Выходные параметры: нет.
Блок-схема: 
 
Рис. 5 — “Блок – схема функции определения номера последнего вхождения минимального элемента последовательности заданной длины в массив”
 
Процедура sort:
	Заголовок procedure sort ( var a: t_arr; const i1, i2: integer ).
	Назначение: упорядочивание элементов массива a , расположенных между позициями i1 и i2 ( включительно ) по не убыванию, сортировкой выбора.
	Входные параметры: a, i1, i2.
	Выходные параметры: a.
Блок-схема:  
Рис. 6 — “Блок – схема процедуры сортировки массива выбором между заданными позициями ( включительно )”
 
Процедура output_array:
	Заголовок procedure output_array ( const a: t_arr; const n: integer ).
	Назначение: вывод последовательности длины n ( n ≤ SIZE ) из массива a.
	Входные параметры: a, n.
	Выходные параметры: нет.
Блок-схема:
 
Рис. 7 — “Блок – схема процедуры вывода последовательности заданной длины из массива”
 
	Блок-схема алгоритма решения задачи с блоками предопределенный процесс:
 
Рис. 8 — “Блок – схема алгоритма с блоками предопределенный процесс”
 

	Тестовые данные:
№	Исходные данные	Результаты	Замечание
	n	a	b[i]	
1	0	Ввод не происходит	“Последовательность пустая”	∅
2	5	10 5 4 3 0 	10 3 4 5 0	max - min
3	10	1 0 2 0 1 5 3 2 7 7	1 0 2 0 1 2 3 5 7 7	min - max
4	10	4 7 5 3 6 0 0 3 0 7	4 7 0 0 3 3 5 6 0 7	max - min
	Текст программы:
program lab4;
  const
     SIZE = 100;
  type
     t_arr = array [ 1 .. SIZE ] of integer;

  {Процедуры ввода последовательности длины n ( n <= SIZE )  
  в массив a}
  procedure input_array (var a: t_arr; n: integer );
    var
     i: byte;
    begin
      for i := 1 to n do
        read ( a [ i ] );
    end;

  {Функция определения номера первого вхождения 
  максимального элемента последовательности длины n,   
  находящейся в массиве a}
  function search_first_max ( a: t_arr; n: integer ): integer;
    var
       i: byte; max, pmax: integer;
    begin
      max := a [ 1 ];
      pmax := 1;
      for i := 2 to n do
        if a [ i ] > max then
          begin
            max := a [ i ];
            pmax := i;
          end;
      search_first_max := pmax;
    end;

  {Функция определения номера последнего 
  вхождения минимального элемента последовательности длины   
  n, находящейся в массиве a}
  function search_last_min ( a: t_arr; n: integer ): 
  integer;
    var
      i: byte;
      min, pmin: integer;
    begin
      min := a [ 1 ];
      pmin := 1;
      for i := 2 to n do
        if a [ i ] <= min then
          begin
            min := a [ i ];
            pmin := i;
          end;
      search_last_min := pmin;
    end;

  {Процедура обмена значений переменных a и b}
  procedure swap ( var a, b: integer );
    var
      t: integer;
    begin
      t := a;
      a := b;
      b := t;
    end;

  {Процедура сортировки по не убыванию элементов массива a
  между ( включительно ) заданными позициями i1 и i2}
  procedure sort ( var a: t_arr;
  i1, i2: integer );
    var
      min, pmin, t, j: integer;
    begin
    for i1 := i1 to i2-1 do
       begin
          pmin := i1;
          for j := i1 + 1 to i2 do
             if ( a [ pmin ] > a [ j ] ) then
                  pmin := j;
          swap ( a [ pmin ], a [ i1 ] );
       end;
  end;

  {Процедура вывода последовательности длины n ( n <= SIZE ) 
  из  массива a}
  procedure output_array ( a: t_arr; n: integer);
    var
     i: integer;
    begin
       for i := 1 to n do
          write ( a [ i ], ' ');
       writeln;
    end;

  var
    a: t_arr;
    n, i1, i2: integer;
  begin
    writeln ( 'Введите длину последовательности, длины не     
    может быть больше 100' );
    readln ( n );
    if ( n = 0 ) then
      writeln ( 'Введена пустая последовательность' )
    else
      begin
writeln ( 'Введите члены ( член ) последовательности' );
        input_array ( a, n );
        i1 := search_first_max ( a, n );
        i2 := search_last_min ( a, n);
        if i1 > i2 then
           swap ( i1, i2 );
        i1 := i1 + 1;
        i2 := i2 + 1;
        writeln ( 'Получена последовательность' );
        sort ( a, i1, i2 );
        output_array ( a, n )
      end;
  end.
	Анализ допущенных ошибок:
	Не выставлен знак “;” после заголовка. Ошибка синтаксическая.
	В процедурах не озаглавлены переменные. Ошибка синтаксическая. 
	Попытка использования “end” в качестве идентификатора. Ошибка синтаксическая.
	Перепутан массив a и b во входных данных. Ошибка логическая.
	В процедуре перепутан порядок переменных. Ошибка логическая.
	В разделе констант и типов перепутан знак “=”.
	В процедуре использован параметр-значение вместо параметра переменной.
	После процедуры поставлена “.”. Ошибка синтаксическая. 
	Перепутан “>” с “<”. Ошибка логическая.
 
	Результаты работы программы:
№	Изображение экрана
1	 
2	 
3	 
4	 

